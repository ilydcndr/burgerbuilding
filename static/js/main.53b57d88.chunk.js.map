{"version":3,"sources":["Components/Hamburger/Hamburger.js","Components/Hamburger/index.js","Components/Item/Item.js","Components/Item/index.js","Components/Itemlist/Itemlist.js","Components/Itemlist/index.js","Components/Totalprice/Totalprice.js","Components/Totalprice/index.js","Allingredients.js","App.js","serviceWorker.js","index.js"],"names":["Hamburger","props","style","width","marginLeft","className","height","icindekiler","map","icindekiurun","key","displayId","backgroundColor","color","margin","marginTop","Item","name","sectigimUrununTamami","length","sectigimIcindeVarmi","onClick","malzemeCikar","malzemeEkle","Itemlist","Allingredients","oneingredients","find","icindeki","filter","id","Totalprice","textAlign","Hesapla","price","App","state","ingredients","totalprice","bind","malzeme","this","setState","concat","Math","random","secilmisUrunKimligi","ingredient","toplam","forEach","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53b57d88.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Hamburger(props){\r\n    return(\r\n        <div style={{width:\"50%\",marginLeft:\"25%\"}}>\r\n            <div className=\"BreadTop\" style={{ height:\"100px\"}}></div>\r\n\r\n            <div> \r\n                   {\r\n                       props.icindekiler.map((icindekiurun)=>{ /* props icindekiler dizidir tek tek yazdırmak için map etmen gerekir */\r\n                           return(         \r\n                               <div key={icindekiurun.displayId} style={\r\n                                {backgroundColor:icindekiurun.color,\r\n                                width: \"80%\",\r\n                                margin: \"0 auto\",\r\n                                marginTop: \"10px\",\r\n                                height: \"20px\",\r\n                               }\r\n                            }>\r\n                                \r\n                            </div>\r\n                           )\r\n                       })\r\n                   }\r\n                 \r\n            </div>\r\n                \r\n            <div className=\"BreadBottom\" style={{height:\"50px\"}}>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Hamburger;","import Hamburger from \"./Hamburger\"\r\n\r\n\r\nexport default Hamburger;","import React from 'react';\r\n\r\nfunction Item(props){\r\n    return(\r\n        <div className=\"BuildControl\">\r\n            <div className=\"Label\">{props.name}</div>\r\n            <div>\r\n              {props.sectigimUrununTamami.length}\r\n            </div>   \r\n                 {\r\n                   props.sectigimIcindeVarmi ? <button className=\"Less\" onClick={()=>{\r\n                    props.malzemeCikar(props);\r\n                }}> Cıkar </button> : <button className=\"Less disabled\" onClick={()=>{\r\n                    props.malzemeCikar(props);\r\n                }}> Cıkar </button>\r\n                 }       \r\n                 <button className=\"more\" onClick={() => {\r\n                props.malzemeEkle(props);     \r\n               }}> Ekle</button>   \r\n               \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item;\r\n\r\n\r\n\r\n","import Item from './Item';\r\n\r\n\r\nexport default Item;","import React from 'react';\r\nimport {Item} from '../index';\r\n\r\nfunction Itemlist(props){\r\n    return(\r\n        <div style={{backgroundColor:\"#fc915d\",width:\"70%\",marginLeft:\"15%\"}}> \r\n            {\r\n              props.Allingredients.map((oneingredients)=>{\r\n\r\n                  const sectigimIcindeVarmi=props.icindekiler.find((icindeki)=>{\r\n                    return(\r\n                            oneingredients.name===icindeki.name\r\n                    )\r\n                  })  \r\n                  \r\n                  const sectigimUrununTamami=props.icindekiler.filter((icindeki)=>{\r\n                    return(\r\n                           oneingredients.name===icindeki.name\r\n                    )\r\n\r\n                  })\r\n\r\n                return (\r\n                <Item  key={oneingredients.id} {...oneingredients}\r\n                           malzemeEkle={props.malzemeEkle}\r\n                           malzemeCikar={props.malzemeCikar}\r\n                           sectigimUrununTamami={sectigimUrununTamami}\r\n                           sectigimIcindeVarmi={sectigimIcindeVarmi}\r\n                       \r\n                       />  \r\n                )   \r\n              })\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Itemlist;","import Itemlist from './Itemlist';\r\n\r\nexport default Itemlist;","import React from 'react';\r\n\r\nfunction Totalprice(props){\r\n    return(\r\n        <div style={{marginLeft:\"45%\",backgroundColor:\"#ff6114\",width:\"10%\",textAlign:\"center\"}}>\r\n         {props.Hesapla()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Totalprice; ","import Totalprice from './Totalprice';\r\n\r\nexport default Totalprice;\r\n","const Allingredients = [\r\n    {\r\n        id: 1,\r\n        name: \"Marul\",\r\n        color: \"green\",\r\n        price: 1\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Peynir\",\r\n        color: \"#ffa600\",\r\n        price: 4\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Kofte\",\r\n        color: \"black\",\r\n        price: 6\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Domates\",\r\n        color: \"red\",\r\n        price: 2\r\n    }\r\n];\r\n\r\nexport default Allingredients;","import React from 'react';\r\nimport {Hamburger,Itemlist,Totalprice} from './Components/index';\r\nimport '../src/App.css'\r\nimport Allingredients from '../src/Allingredients';\r\n \r\n  class App extends React.Component {\r\n     constructor(props){\r\n       super(props);\r\n       this.state = {\r\n         ingredients:[],\r\n         totalprice:0,\r\n       };\r\n\r\n       this.malzemeEkle=this.malzemeEkle.bind(this);\r\n       this.malzemeCikar=this.malzemeCikar.bind(this);\r\n       this.Hesapla=this.Hesapla.bind(this);\r\n     }\r\n     \r\n     malzemeEkle(malzeme){\r\n      this.setState({\r\n        ingredients: [...this.state.ingredients].concat([{...malzeme, displayId: Math.random()}])\r\n      })\r\n    }\r\n\r\n    malzemeCikar(malzeme){\r\n      const secilenUrun=this.state.ingredients.find((ingredient)=>{\r\n        return (\r\n          ingredient.name===malzeme.name\r\n        )\r\n      })\r\n      const secilmisUrunKimligi=secilenUrun.displayId\r\n \r\n        this.setState({\r\n          ingredients:this.state.ingredients.filter((ingredient)=>{\r\n            return(\r\n              secilmisUrunKimligi!==ingredient.displayId\r\n            )       \r\n        })\r\n      })\r\n}\r\n      \r\n       Hesapla(){  \r\n         let toplam=0;\r\n         this.state.ingredients.forEach((ingredient)=>{\r\n           return(\r\n            toplam+=ingredient.price\r\n           )       \r\n        })\r\n        return(\r\n          ` Toplam Fiyat ${toplam} TL`\r\n        )\r\n      }\r\n         \r\n\r\n  render() {\r\n     return (\r\n       <div>\r\n         <Hamburger icindekiler={this.state.ingredients}/>      \r\n         <Totalprice Hesapla={this.Hesapla}/>\r\n         <Itemlist Allingredients={Allingredients} /*bir dizi yollar içeride tek tek yazdırmak için map etmen gerekir */\r\n                   malzemeEkle={this.malzemeEkle}\r\n                   malzemeCikar={this.malzemeCikar}\r\n                   icindekiler={this.state.ingredients}\r\n         /> \r\n       </div>\r\n     )\r\n   }\r\n }\r\n \r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}